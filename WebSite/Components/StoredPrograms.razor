@using Microsoft.JSInterop
@inject IJSRuntime JS
@using Subleq.Hardware
@using WebSite.Components

@code {
    [Parameter]
    public EventCallback<int[]> OnLoadProgram { get; set; }

    [Parameter]
    public Memory MainMemory { get; set; } // Pass main memory from parent

    private Dictionary<string, int[]> programs = new();
    private int[]? selectedProgram;
    private string? newProgramName;
    private int[]? newProgram;
    private string? editProgramName;
    private int[]? editProgram;
    private string? error;

    // Modal state
    private bool showAddModal = false;
    private bool showEditModal = false;
    private Memory? modalMemory;
    private string? modalProgramName;
    private bool isAddMode = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProgramsAsync();
            StateHasChanged(); // Force re-render after loading
        }
    }

    private async Task LoadProgramsAsync()
    {
        try
        {
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "Programs");
            if (!string.IsNullOrWhiteSpace(json))
            {
                programs = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, int[]>>(json) ?? new();
            }
            else
            {
                await PopulateDefaultPrograms();
                await SaveProgramsAsync();
            }
        }
        catch (Exception ex)
        {
            error = $"Error loading programs: {ex.Message}";
        }
    }

    private async Task PopulateDefaultPrograms()
    {
        programs = new();
        programs.Add("ClearTarget", new[] { 6, 6, 0, 0, 0, 0, 5 });
        programs.Add("OutputCharToConsole", new[] { 6, -1, 0, 0, 0, 0, 72 });
    }

    private async Task SaveProgramsAsync()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(programs);
        await JS.InvokeVoidAsync("localStorage.setItem", "Programs", json);
    }

    private async Task AddProgram()
    {
            // Show modal for adding
            isAddMode = true;
            showAddModal = true;
            modalProgramName = "";
            // Initialize modalMemory to same length as MainMemory
            int memLen = MainMemory?.Dump().Length ?? 32;
            modalMemory = new Memory(memLen);
            for (int i = 0; i < memLen; i++)
                modalMemory.Write(i, 0);
    }

    private void StartEdit(string progName)
    {
            if (programs.TryGetValue(progName, out var code))
            {
                isAddMode = false;
                showEditModal = true;
                modalProgramName = progName;
                modalMemory = new Memory(code.Length);
                for (int i = 0; i < code.Length; i++)
                    modalMemory.Write(i, code[i]);
            }
    }

    private async Task SaveEdit()
    {
            if (modalMemory != null && !string.IsNullOrWhiteSpace(modalProgramName))
            {
                var arr = modalMemory.Dump();
                programs[modalProgramName] = arr;
                showEditModal = false;
                modalMemory = null;
                modalProgramName = null;
                await SaveProgramsAsync();
            }
    }

    private void CancelEdit()
    {
        showEditModal = false;
        showAddModal = false;
        modalMemory = null;
        modalProgramName = null;
    }

    private async Task DeleteProgram(string progName)
    {
        if (programs.ContainsKey(progName))
        {
            programs.Remove(progName);
            await SaveProgramsAsync();
        }
    }
    private string ProgramToString(int[] prog) => string.Join(", ", prog);

    private int[]? ParseProgram(string? input)
    {
        if (string.IsNullOrWhiteSpace(input)) return null;
        try
        {
            return input.Split(',', StringSplitOptions.RemoveEmptyEntries)
                        .Select(s => int.Parse(s.Trim()))
                        .ToArray();
        }
        catch
        {
            return null;
        }
    }
}

@if (!string.IsNullOrEmpty(error))

{
    <div class="alert alert-danger">@error</div>
}
<button class="btn btn-success mb-2" @onclick="AddProgram">Add New Program</button>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>#</th>
            <th>Program</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var kvp in programs)
        {
            <tr>
                <td>@kvp.Key</td>
                <td>@ProgramToString(kvp.Value)</td>
                <td>
                    <button class="btn btn-primary btn-sm me-1" @onclick="() => StartEdit(kvp.Key)">Edit</button>
                    <button class="btn btn-danger btn-sm me-1" @onclick="() => DeleteProgram(kvp.Key)">Delete</button>
                    <button class="btn btn-info btn-sm" @onclick="() => LoadProgram(kvp.Value)">Load</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Modal for Add/Edit Program *@
@if (showAddModal || showEditModal)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isAddMode ? "Add New Program" : "Edit Program")</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label>Program Name</label>
                        <input class="form-control" @bind="modalProgramName" placeholder="Enter program name" />
                    </div>
                    @if (modalMemory != null)
                    {
                        <MemoryView MemoryObject="modalMemory" />
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="@(isAddMode ? SaveAdd : SaveEdit)">Save</button>
                    <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private async Task SaveAdd()
    {
        if (modalMemory != null && !string.IsNullOrWhiteSpace(modalProgramName))
        {
            var arr = modalMemory.Dump();
            programs[modalProgramName] = arr;
            showAddModal = false;
            modalMemory = null;
            modalProgramName = null;
            await SaveProgramsAsync();
        }
    }
    private string? newProgramString
    {
        get => newProgram is null ? "" : ProgramToString(newProgram);
        set => newProgram = ParseProgram(value);
    }

    private string? editProgramString
    {
        get => editProgram is null ? "" : ProgramToString(editProgram);
        set => editProgram = ParseProgram(value);
    }
    private async Task LoadProgram(int[] program)
    {
        if (OnLoadProgram.HasDelegate)
        {
            await OnLoadProgram.InvokeAsync(program);
        }
    }
}